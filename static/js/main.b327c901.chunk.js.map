{"version":3,"sources":["components/Firebase.js","components/Recording.js","components/Image.js","components/Question.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","Mp3Recorder","MicRecorder","bitRate","Recording","props","start","e","preventDefault","state","isBlocked","console","log","then","setState","isRecording","catch","error","stop","getMp3","blob","blobURL","URL","createObjectURL","Change1","answer","target","value","handleSubmit","collection","add","text","audio","a","navigator","getUserMedia","button","this","onClick","className","type","placeholder","onChange","style","display","width","src","controls","marginLeft","Component","Image","alt","Question","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"2RAcAA,IAASC,cAXc,CACnBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAMZ,IAAMC,EAAGV,IAASW,YCbnBC,EAAc,IAAIC,IAAY,CAAEC,QAAS,MAI1BC,E,kDACjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAoBVC,MAAQ,SAACC,GACLA,EAAEC,iBACE,EAAKC,MAAMC,UACbC,QAAQC,IAAI,qBAEZX,EACGK,QACAO,MAAK,WACJ,EAAKC,SAAS,CAAEC,aAAa,OAC5BC,OAAM,SAACT,GAAD,OAAOI,QAAQM,MAAMV,OA9BpB,EAiChBW,KAAO,SAACX,GACJA,EAAEC,iBACJP,EACGiB,OACAC,SACAN,MAAK,YAAqB,IAAD,mBAAVO,GAAU,WAClBC,EAAUC,IAAIC,gBAAgBH,GACpC,EAAKN,SAAS,CAAEO,UAASN,aAAa,OACrCC,OAAM,SAACT,GAAD,OAAOI,QAAQC,IAAIL,MAC5BI,QAAQC,IAAI,sBA1CA,EA4ChBY,QAAU,SAACjB,GACT,EAAKO,SAAS,CACVW,OAAOlB,EAAEmB,OAAOC,SA9CN,EAiDhBC,aAAe,SAACrB,GACdA,EAAEC,iBACFG,QAAQC,IAAI,EAAKH,MAAMgB,QACvB1B,EAAG8B,WAAW,UAAUC,IAAI,CACxBC,KAAK,EAAKtB,MAAMgB,OAChBO,MAAM,EAAKvB,MAAMY,UAErB,EAAKP,SAAS,CACVmB,EAAE,GACFZ,QAAQ,MAxDZ,EAAKZ,MAAQ,CACTM,aAAa,EACbM,QAAS,GACTX,WAAW,EACXe,OAAO,IANG,E,gEASE,IAAD,OACfS,UAAUC,aAAa,CAAEH,OAAO,IAC5B,WACErB,QAAQC,IAAI,sBACZ,EAAKE,SAAS,CAAEJ,WAAW,OAE7B,WACEC,QAAQC,IAAI,qBACZ,EAAKE,SAAS,CAAEJ,WAAW,S,+BA6CjC,IAAI0B,EAKJ,OADIA,EAHAC,KAAK5B,MAAMM,YAGD,4BAAQuB,QAASD,KAAKnB,KAAMqB,UAAU,cAFvC,4BAAQD,QAASD,KAAK/B,MAAOiC,UAAU,gBAIhD,8BACQ,2BAAOC,KAAK,WAAWD,UAAU,WAAWE,YAAY,sBAAsBd,MAAOU,KAAK5B,MAAMwB,EAAGS,SAAUL,KAAKb,UAClH,6BACA,yBAAKe,UAAU,GAAGI,MAAO,CAACC,QAAQ,OAAOC,MAAM,UAC/C,2BAAOC,IAAKT,KAAK5B,MAAMY,QAAS0B,SAAS,aAGrC,yBAAKJ,MAAO,CAACK,WAAW,QAE3BZ,IAKF,6BAEC,6BACA,yBAAKG,UAAU,GAAGI,MAAO,CAACC,QAAQ,OAAOC,MAAM,UAC3C,4BAAQP,QAASD,KAAKT,aAAce,MAAO,CAACK,WAAW,SAAUT,UAAU,UAA3E,gB,GAvFeU,aCNlBC,E,uKAEb,OACI,6BACI,yBAAKJ,IAAI,yDAAyDP,UAAU,SAASY,IAAI,c,GAJtEF,aCAdG,E,uKAEb,OACI,yBAAKb,UAAU,YAAf,2C,GAH0BU,aCgBvBI,MAbf,WACE,OACE,yBAAKd,UAAU,OAEb,gCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB7B,WACrBA,UAAU8B,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdnD,OAAM,SAAAC,GACLN,QAAQM,MAAMA,EAAMmD,c","file":"static/js/main.b327c901.chunk.js","sourcesContent":["import firebase from 'firebase'\nimport firestore from 'firebase/firebase-firestore'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAPi3sHCVukXT3fJ_RutCRIrkGOgPmZMvM\",\n    authDomain: \"fir-study-a5944.firebaseapp.com\",\n    databaseURL: \"https://fir-study-a5944.firebaseio.com\",\n    projectId: \"fir-study-a5944\",\n    storageBucket: \"fir-study-a5944.appspot.com\",\n    messagingSenderId: \"563369099608\",\n    appId: \"1:563369099608:web:9bc82430cb7974c118a52d\",\n    measurementId: \"G-RLPQ50JNB3\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n\nexport const db=firebase.firestore();","import React, { Component } from 'react'\nimport MicRecorder from 'mic-recorder-to-mp3';\nimport {db} from './Firebase'\n\nconst Mp3Recorder = new MicRecorder({ bitRate: 128 });\n\n\n\nexport default class Recording extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            isRecording: false,\n            blobURL: '',\n            isBlocked: false,\n            answer:''\n          }\n    }\n    componentDidMount(){\n        navigator.getUserMedia({ audio: true },\n            () => {\n              console.log('Permission Granted');\n              this.setState({ isBlocked: false });\n            },\n            () => {\n              console.log('Permission Denied');\n              this.setState({ isBlocked: true })\n            },\n          );\n    }\n    start = (e) => {\n        e.preventDefault();\n        if (this.state.isBlocked) {\n          console.log('Permission Denied');\n        } else {\n          Mp3Recorder\n            .start()\n            .then(() => {\n              this.setState({ isRecording: true });\n            }).catch((e) => console.error(e));\n        }\n      };\n      stop = (e) => {\n          e.preventDefault();\n        Mp3Recorder\n          .stop()\n          .getMp3()\n          .then(([buffer, blob]) => {\n            const blobURL = URL.createObjectURL(blob)\n            this.setState({ blobURL, isRecording: false });\n          }).catch((e) => console.log(e));\n          console.log(\"Recording stopped\")\n      };\n      Change1 = (e) => {\n        this.setState({\n            answer:e.target.value\n        })\n      }\n      handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(this.state.answer)\n        db.collection('record').add({\n            text:this.state.answer,\n            audio:this.state.blobURL\n        })\n        this.setState({\n            a:'',\n            blobURL:''\n        })\n      }\n    render() {\n        let button;\n        if(!this.state.isRecording)\n            button = <button onClick={this.start} className=\"greenbutton\" />\n        else\n            button =  <button onClick={this.stop} className=\"redbutton\" />    \n        return (\n            <form>\n                    <input type=\"textarea\" className=\"textarea\" placeholder=\"Type your answer...\" value={this.state.a} onChange={this.Change1}/>\n                    <br/>\n                    <div className=\"\" style={{display:\"flex\",width:\"350px\"}}>\n                    <audio src={this.state.blobURL} controls=\"controls\" />\n                       {/* <i className=\"material-icons\" height=\"30px\">mic</i>  */}\n\n                        <div style={{marginLeft:\"0px\"}} >\n                   \n                    {button}\n                    \n                     \n               </div>\n                    </div>\n                   <br/>\n                   \n                    <br/>\n                    <div className=\"\" style={{display:\"flex\",width:\"350px\"}}>\n                        <button onClick={this.handleSubmit} style={{marginLeft:\"200px\"}} className=\"submit\">SUBMIT</button>\n                    </div>\n            </form>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Image extends Component {\n    render() {\n        return (\n            <div>\n                <img src=\"https://miro.medium.com/max/256/0*r-ax5Vxm1V2svKbG.png\" className=\"circle\" alt=\"JAVA\"/>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Question extends Component {\n    render() {\n        return (\n            <div className=\"question\">\n                What is garbage collection in java?\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport Recording from './components/Recording';\nimport Image from './components/Image';\nimport Question from './components/Question'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n  \n      <center>\n      <Question/>\n      <Image/>\n      <Recording/>\n      </center>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}